import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Download, FileText, Share, CheckCircle } from 'lucide-react';
import { ForesightConstruct } from '../types';

interface ExportInsightButtonProps {
  foresightConstruct: ForesightConstruct;
  className?: string;
}

export function ExportInsightButton({ foresightConstruct, className = '' }: ExportInsightButtonProps) {
  const [isExporting, setIsExporting] = useState(false);
  const [exportComplete, setExportComplete] = useState(false);

  const exportToPDF = async () => {
    setIsExporting(true);
    
    // Simulate export process
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Create export content
    const exportContent = `
SYNAPTIC FORGE - Strategic Insight Export
Generated: ${new Date().toLocaleString()}

STRATEGIC VECTOR: ${foresightConstruct.strategicVector.title}
Confidence Score: ${Math.round(foresightConstruct.strategicVector.confidenceScore * 100)}%
Impact Timeframe: ${foresightConstruct.strategicVector.impactTimeframe.replace('_', ' ')}

DESCRIPTION:
${foresightConstruct.strategicVector.description}

ACTIONABLE RECOMMENDATION:
${foresightConstruct.conciseActionableRecommendation}

SUPPORTING EVIDENCE:
${foresightConstruct.supportingProofPoints.map((point, index) => `${index + 1}. ${point}`).join('\n')}

POTENTIAL CHALLENGES:
${foresightConstruct.potentialChallenges.map((challenge, index) => `${index + 1}. ${challenge}`).join('\n')}

COGNITIVE OPTIMIZATION SETTINGS:
- Voice Tone: ${foresightConstruct.sensoryDirectives.synthesizedVoiceTone}
- Brainwave Target: ${foresightConstruct.sensoryDirectives.targetBrainwaveFrequency.type} (${foresightConstruct.sensoryDirectives.targetBrainwaveFrequency.range})
- Visual Metaphor: ${foresightConstruct.sensoryDirectives.dynamicVisualMetaphor}
- Motion Intensity: ${foresightConstruct.sensoryDirectives.motionIntensity}/10

LEADING INDICATORS:
${foresightConstruct.strategicVector.leadingIndicators.map((indicator, index) => `${index + 1}. ${indicator}`).join('\n')}

---
Generated by SYNAPTIC FORGE - The Adaptive Foresight Engine
Â© 2025 Strategic Intelligence Platform
    `.trim();

    // Create and download file
    const blob = new Blob([exportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `synaptic-forge-insight-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    setIsExporting(false);
    setExportComplete(true);
    
    // Reset export complete state after 3 seconds
    setTimeout(() => setExportComplete(false), 3000);
  };

  const shareInsight = async () => {
    const shareText = `Strategic Insight from SYNAPTIC FORGE:

${foresightConstruct.strategicVector.title}
Confidence: ${Math.round(foresightConstruct.strategicVector.confidenceScore * 100)}%

${foresightConstruct.conciseActionableRecommendation}

Generated by SYNAPTIC FORGE - The Adaptive Foresight Engine`;

    if (navigator.share) {
      try {
        await navigator.share({
          title: 'SYNAPTIC FORGE Strategic Insight',
          text: shareText,
        });
      } catch (error) {
        console.log('Share cancelled');
      }
    } else {
      // Fallback: copy to clipboard
      await navigator.clipboard.writeText(shareText);
      alert('Insight copied to clipboard!');
    }
  };

  return (
    <div className={`flex items-center gap-3 ${className}`}>
      <motion.button
        onClick={exportToPDF}
        disabled={isExporting || exportComplete}
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium text-sm transition-all ${
          exportComplete
            ? 'bg-emerald-600/20 text-emerald-300 border border-emerald-400/30'
            : isExporting
            ? 'bg-gray-600/20 text-gray-400 border border-gray-400/30 cursor-not-allowed'
            : 'bg-blue-600/20 text-blue-300 border border-blue-400/30 hover:bg-blue-600/30'
        }`}
      >
        {exportComplete ? (
          <>
            <CheckCircle className="w-4 h-4" />
            Exported
          </>
        ) : isExporting ? (
          <>
            <motion.div
              animate={{ rotate: 360 }}
              transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
              className="w-4 h-4 border-2 border-gray-400/30 border-t-gray-400 rounded-full"
            />
            Exporting...
          </>
        ) : (
          <>
            <Download className="w-4 h-4" />
            Export Insight
          </>
        )}
      </motion.button>

      <motion.button
        onClick={shareInsight}
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        className="flex items-center gap-2 px-4 py-2 bg-purple-600/20 text-purple-300 border border-purple-400/30 hover:bg-purple-600/30 rounded-lg font-medium text-sm transition-all"
      >
        <Share className="w-4 h-4" />
        Share
      </motion.button>
    </div>
  );
}